일반적으로는 데이터를 저장할 변수를 선언해서 데이터를 저장함. (메모리 확보 방법임.)
동적메모리할당: 프로그램이 메모리를 확보하는 또다른 방법.

변수를 선언하는 게 아니라, 프로그램의 요청으로 메모리를 할당받는다. 거기에 데이터를 저장하는 방식.

메모리 요청함수 - malloc(m-alloc)

malloc함수를 호출하여 동적메모리할당을 요청하면
요구하는 크기의 메모리를 할당하고, 그 시작주소를 반환한다.

int *p;
p = (int *)malloc(40);
// malloc이 return해 주는 메모리주소는 어딘가에 보관해야 함.
// 보관법: 메모리주소를 어떤 변수에 저장. -> 포인터변수여야 함. 그래서 int *p를 정의한 것.
//  (만약 숫자가 아닌 다른 걸 저장하려면 int *p대신 char *p처럼 다른 변수명으로 저장하면 된다.)
// malloc이 반환하는 주소는 기본적으로 타입이 없는 주소(void *)이다.
// 정수를 저장하려고 이걸 int *로 변환했지만, 반드시 필요한 건 아니다.
// 할당받을 메모리의 크기를 byte단위로 지정한다.
// 이 경우, 10개 정수를 저장하기 위해 40byte를 요청함.

if (p==NULL){
    // 동적 메모리 할당이 실패했음을 의미
    // 적절한 예외처리를 해준다.
    // 자주 있는 일은 아님. 프로그램을 종료한다던가 하는 식의 명령어면 됨.

}
p[0] = 12;
p[1] = 24;
*(p+2) = 36;
// malloc로 할당받은 메모리는 이렇게 보통의 배열처럼 쓴다.
// p는 포인터로 할당받은 값이지만, 마치 배열처럼 써도 문제가 없다.


동적메모리 할당을 쓰는 대표적인 예시 : array reallowcation (배열 키우기)
배열은 배열 크기 지정이 필요하다. (크기 지정하고 선언해야 함)
다만 크기가 정해져 있다 보니, 배열 크기가 부족한 상황이 발생할 수 있다.

int * array = (int *)malloc(4*sizeof(int)); //이 시스템에서 정수의 사이즈(몇 바이트로 표현되는가) * 실제로 할당할 메모리 개수 (여기서는 4개)
// 즉 malloc(16)과 동일하다. 하지만 고정된 바이트수를 넣는 것보다는 sizeof를 쓰는 게 좋다. 컴퓨터마다 int가 할당하는 바이트가 다를 수 있으므로.. = 코드의 호환성 보장하기 위해서.
array[0]=1;
array[1]=2;
array[2]=3;

// 배열의 크기를 키우고 싶다면?
// 정확히는 배열의 크기를 키우는 게 아니라 
// 다른 메모리에 더 큰 배열을 할당받은 다음, 그 배열에 데이터를 옮기는 것

int * tmp = (int *)malloc(8*sizeof(int));
int i'
for (i=0; i<4; i++){
    tmp[i]=array[i]
}
array = tmp;
// array의 배열을 확장했기 때문에 더 쓸 수 있다.
array[4] = 4;
array[5] = 5;


// 다만 위의 코드가 갖고 있는 문제점은, 원래 array (4칸짜리) 메모리 주소를 가진 변수가 아무것도 없다.
// 따라서 저 메모리에 있는 값을 호출할 수 없게 되는데, 이런 메모리주소를 garbage라고 한다.
// c언어는 이 메모리공간을 자동으로 처리하지 않는다. 따라서 할당받았으나 쓰지 않는 공간이 됨.
// 프로그램이 필요 이상의 메모리를 소비하는 거고, 이게 누적되면 성능 하락으로 이어진다.

cf. int array[4]와 int * array = (int *)malloc(4*sizeof(int));의 차이는???

두 가지 중요한 차이가 있음.
1. int array[4] 형태로 정의할 경우,
    매열의 이름은 배열의 시작주소를 저장하는 포인터 변수가 된다고 했다.
    하지만 "그 값은 변경할 수 없다"는 제약조건이 들어간다.
    array[4] 형태로 정의할 경우
    array = tmp;가 성립하지 않는다.

    array를 포인터 이름으로 선언하면 포인터값(메모리주소값)을 변경할 수 있지만
    array를 배열로 선언하면 포인터값을 변경할 수 없다.

    따라서 배열의 크기 변경이 필요하다면
    처음부터 동적 메모리 할당을 받아야 한다.

2. 어떤 변수의 lifetime과 관련이 있으나, 나중 수업에서 제대로 설명할 예정.